*locate.txt*   Locate stuff like there is no tomorrow.                  v1.1.0
*Locate*

The |:lvimgrep| you've always dreamed of.


==============================================================================
CONTENTS                                                      *LocateContents*

    1. Intro .............................. |LocateIntro|
    2. Commands ........................ |LocateCommands|
      2.1 |:Locate|
      2.2 |:Lpurge|
      2.3 |:Lrefresh|
    3. Mappings ........................ |LocateMappings|
    4. Configuration ..................... |LocateConfig|
      4.1  |g:locate_highlight|
      4.2  |g:locate_initial_mark|
      4.3  |g:locate_max_height|
      4.4  |g:locate_focus|
      4.5  |g:locate_global|
      4.6  |g:locate_jump_to|
      4.7  |g:locate_very_magic|
      4.8  |g:locate_smartcase|
      4.9  |g:locate_refresh|
      4.10 |g:locate_sort|
    5. Changes .......................... |LocateChanges|


==============================================================================
1. Intro                                                         *LocateIntro*

Locate provides a command |:Locate| which wraps the built-in |:lvimgrep|
command, with searches automatically being done in the current window.

Here are a few sample features provided:

  * Automatic pattern wrapping
  * Optional smart case  and very magic mode
  * Customizable search match highlighting


==============================================================================
2. Commands                                                   *LocateCommands*


------------------------------------------------------------------------------
2.1 :L[ocate][!] <pattern>                                      *:L* *:Locate*
    :L[ocate][!] /<pattern>/[gG]

Locate <pattern> in current window and load matches in location list. With 
[!], append search results to current location list (i.e. use |:lvimgrepadd|).

<pattern> can be any regular expression or Vim search pattern. If <pattern> is 
enclosed in non-ID characters (optionally followed by the 'g' and 'j' flags), 
it will be passed through as is to the underlying |:lvimgrep| command. E.g.

  /hello/
  #hello world!#g

In any other case, <pattern> will be automatically upgraded to a Vim search
pattern based on the following configuration options:

  * |g:locate_global|
  * |g:locate_very_magic|
  * |g:locate_smartcase|

Examples of transformed patterns (with default configuration options):

      hello
  =>  /\v\chello/g

      Hello
  =>  /\v\CHello/g

      /\v\Chello world! 
  =>  #/\v\Chello world!#g

      /\mhello/world
  =>  #/\m\chello/world#g

Note that Locate will only wrap patterns with non-ID characters that are not
in the pattern. You don't need to worry about not using certain characters.


------------------------------------------------------------------------------
2.2 :Lpurge[!]                                                       *:Lpurge*

Close location list and clear locate search highlighting for current window.
With [!], do the same for all windows in current tab.


------------------------------------------------------------------------------
2.3 :Lrefresh[!]                                                   *:Lrefresh*

Refresh search for all active patterns in the current window. With [!] only do 
so if there is a currently active search and keep cursor in place.


==============================================================================
3. Mappings                                                   *LocateMappings*

Locate provides the following two mappings:

------------------------------------------------------------------------------
                                                                          *gl*

In normal mode, |gl| will locate the word under the cursor (cf. |<cword>|).
In visual mode, |gl| will locate the selection. Note that the selection can
not go over more than one line.

Note that gl will only work in 'normal' buffers (i.e. where |'buftype'| is
empty). This is to avoid ambiguity and keep location windows organized.


------------------------------------------------------------------------------
                                                                          *gL*

Similar to |gl| but appends results to location list instead of replacing the
current results.


==============================================================================
4. Configuration                                                *LocateConfig*

You can tame Locate by changing the following options.


------------------------------------------------------------------------------
4.1 g:locate_highlight = 'Search'                         *g:locate_highlight*

Highlight style of Locate matches.

Highlighting is specific to the buffer search and refreshed automatically 
when a new Locate search is done. When the location list is closed, the 
highlighting is turned off.

Note that this highlighting is separate from the global search highlighting 
(triggered by |'hlsearch'|). In particular, this enables you to have several 
highlights at any given time and potentially of different colors. For 
example 'pandocDefinitionTerm' looks good if you are using Solarized 
(https://github.com/altercation/vim-colors-solarized).

Set this option to an empty string to disable any Locate specific 
highlighting.


------------------------------------------------------------------------------
4.2 g:locate_initial_mark = 'l'                        *g:locate_initial_mark*

By default, Locate sets a mark  at the position of the cursor before running a 
search. This is useful to jump back to work after doing any search related 
edits. This option controls which mark is used.

Set this option to an empty string to disable this behavior.


------------------------------------------------------------------------------
4.3 g:locate_max_height = 20                             *g:locate_max_height*

Set the maximum height of the location list window opened by Locate. The 
location list window will be adequately sized depending on the number of 
search results.


------------------------------------------------------------------------------
4.4 g:locate_focus = 0                                        *g:locate_focus*

Focus the location list window automatically after each search.


------------------------------------------------------------------------------
4.5 g:locate_global = 1                                      *g:locate_global*

Make all locate searches global, i.e. count multiple matches on a single line 
as separate matches. You can override this behavior by appending a 'G' flag to 
the search pattern.


------------------------------------------------------------------------------
4.6 g:locate_jump_to = 'first'                              *g:locate_jump_to*

TODO:

This option controls the position of the cursor after each search.

Resolve interaction with |g:locate_stay| and |g:locate_mark|. Probably do this 
by always jumping to a search result (otherwise state consistency with 
currently selected location list item and cursor position is lost).

Possible values:

* 'first': go to first match in location list
* 'next': go to match right after cursor (can wrap around)
* 'closest': go to match closest to cursor (can be above or below current 
  cursor position).

Note that this option only affects the behavior of the |:Locate| command as 
|:Lrefresh| always keeps the cursor in the same position.

Actually -> no make :Lrefresh with a [!] jump to match (again respecting this 
option). Or opposite, having [!] trigger silent refresh.


------------------------------------------------------------------------------
4.7 g:locate_very_magic = 0                              *g:locate_very_magic*

Add a very magic flag prefix '\v' to all search patterns (cf. |'magic'|), 
unless one is already specified (i.e. the search patterns starts with one of 
'\v', '\V', '\m', '\M').


------------------------------------------------------------------------------
4.8 g:locate_smartcase = 1                                *g:locate_smartcase*

Activate |'smartcase'| when searching for patterns. This behaves exactly like 
the option for normal searches:

* This has no effect if |'ignorecase'| is not set or if the search pattern 
  already contains a case sensitivity flag (i.e. '\c' or '\C')
* Otherwise:

  * If the pattern contains an uppercase letter, search will be case-sensitive
  * If the pattern contains only lowercase letters, search will be 
    case-insensitive


------------------------------------------------------------------------------
4.9 g:locate_refresh = 1                                    *g:locate_refresh*

Refresh location search results when the buffer in the current window is 
saved. Note that this will only trigger if the location list window is open at 
that time.


------------------------------------------------------------------------------
4.10 g:locate_sort = 1                                         *g:locate_sort*

Keep the location list sorted by line and column number. This is relevant when 
using |:Locate| with [!].


==============================================================================
5. Changes                                                     *LocateChanges*

v1.2.0 (?)
  * |g:locate_sort|, |g:locate_refresh| options
  * Configurable cursor position (TODO)
  * Use last search term if empty pattern (TODO)
  * Close highlighting when switching buffer in same window (or have 
    persistent option which will only trigger a search refresh instead)

v1.1.0 (07/28/2013)
  * Automatic location list closing
  * |:Lpurge|, |:Lrefresh| commands
  * Multiple windows per buffer supported
  * Multiple tabs supported

v1.0.0 (07/26/2013)
  * Initial stable release.
